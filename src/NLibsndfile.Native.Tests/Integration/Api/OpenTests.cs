using System;
using System.IO;
using NUnit.Framework;

namespace NLibsndfile.Native.Tests.Integration.Api
{
    [TestFixture]
    [Category("NLibsndfileApi.Native.IntegrationTests.Api")]
    public class OpenTests
    {
        [Test]
        public void OpenWav_ReadModeReturnsValidHandle()
        {
            var api = new LibsndfileApi();
            var info = new LibsndfileInfo();

            Assert.That(File.Exists(TestConfiguration.ValidWavFile));

            var open = api.Open(TestConfiguration.ValidWavFile, LibsndfileMode.Read, ref info);
            Assert.That(open != IntPtr.Zero);

            var close = api.Close(open);
            Assert.That(close == LibsndfileError.NoError);
        }

        [Test]
        public void OpenWav_WriteModeReturnsValidHandle()
        {
            var api = new LibsndfileApi();
            var info = TestConfiguration.GetValidWavFileInfo();
            var filename = string.Format("tmp_{0}", TestConfiguration.ValidWavFile);

            var open = api.Open(filename, LibsndfileMode.Write, ref info);
            Assert.That(open != IntPtr.Zero);
            Assert.That(File.Exists(filename));

            var close = api.Close(open);
            Assert.That(close == LibsndfileError.NoError);

            File.Delete(filename);
            Assert.That(!File.Exists(filename));
        }

        [Test]
        public void OpenWav_ReadWriteModeReturnsValidHandle()
        {
            var api = new LibsndfileApi();
            var info = TestConfiguration.GetValidWavFileInfo();

            Assert.That(File.Exists(TestConfiguration.ValidWavFile));

            var open = api.Open(TestConfiguration.ValidWavFile, LibsndfileMode.Rdwr, ref info);
            Assert.That(open != IntPtr.Zero);

            var close = api.Close(open);
            Assert.That(close == LibsndfileError.NoError);
        }
    }
}